### radios
s http d radio.darkscience.net P 8000 p /stream.ogg:	music-stop;printf "%%s\n" '%U' | music-playlist
s http d anonradio.net P 8000 p /anonradio:		music-stop;printf "%%s\n" '%U' | music-playlist
s https d tilderadio.org p /listen:			music-stop;printf "%%s\n" '%U' | music-playlist
s https d radio.tildeverse.org p /radio/8000/radio.ogg:	music-stop;printf "%%s\n" '%U' | music-playlist
s https d radio.reclaim.technology p /stream:		music-stop;printf "%%s\n" '%U' | music-playlist
s https d radio.reclaim.technology p /stream:		music-stop;printf "%%s\n" '%U' | music-playlist
s https d radio.tildeverse.org p /radio/8000/radio.mp3: music-stop;printf "%%s\n" '%U' | music-playlist
s http d cyberadio.pw P 8000 p /stream:			music-stop;printf "%%s\n" '%U' | music-playlist
s https d radio.reclaim.technology p /stream:		music-stop;printf "%%s\n" '%U' | music-playlist
### not sure if video or audio
s https p /stream.m3u:	music-stop ; printf '%U' | music-playlist "$(printf 'video\naudio\n' | dmenu)"; music-init
s http p /stream.m3u:	music-stop ; printf '%U' | music-playlist "$(printf 'video\naudio\n' | dmenu)"; music-init

s http* d ttm.sh p *.png:	wget -qO- '%U' | feh -. -
s http* d loud.house p /i/*:	wget -qO- '%U' | feh -. -

### this is probably the smarter way of doing these instead of per-domain
### this was causing empty lines for http links. :/
s http* p *.png:	wget -qO- '%U' | feh -. -
s http* p *.jpg:	wget -qO- '%U' | feh -. -
s http* p *.jpeg:	wget -qO- '%U' | feh -. -
s http* p *.bmp:	wget -qO- '%U' | feh -. -
s http* p *.gif:	wget -qO- '%U' | feh -. -
s http* p *.mp3:	music-stop ; music-player '%U' ; music-init

### link shorteners. dereference them and pass it to the user.
s http d epo.k.vu:	copy_start_nevermind.sh "$(unshorten.sh '%U')"
s https d epo.k.vu:	copy_start_nevermind.sh "$(unshorten.sh '%U')"
s http d bit.ly:	copy_start_nevermind.sh "$(unshorten.sh '%U')"
s https d bit.ly:	copy_start_nevermind.sh "$(unshorten.sh '%U')"

### youtube. ask user whether it is video or audio to know whether it can be started in the background.
s http D youtube.com:	music-stop ; printf '%U' | music-playlist "$(printf 'video\naudio\n' | dmenu)"; music-init
s http D youtu.be:	music-stop ; printf '%U' | music-playlist "$(printf 'video\naudio\n' | dmenu)"; music-init
s https D youtube.com:	music-stop ; printf '%U' | music-playlist "$(printf 'video\naudio\n' | dmenu)"; music-init
s https D youtu.be:	music-stop ; printf '%U' | music-playlist "$(printf 'video\naudio\n' | dmenu)"; music-init

### paste sites. get the raw data and put into a terminal to avoid opening a browser.
s http d pastebin.com:	tty || export 'HACK=x-terminal-emulator -e' ; $HACK less -f <(curl '%s://%d/raw%p')
s https d pastebin.com:	tty || export 'HACK=x-terminal-emulator -e' ; $HACK less -f <(curl '%s://%d/raw%p')


### nnq, if there's a query string of anything, match.
#s http d thebackupbox.net p /cgi-bin/paste.cgi:		tty || export 'HACK=x-terminal-emulator -e' ; $HACK less -f <(curl '%U') #this was matching too much with 'nnq'
#s https d thebackupbox.net p /cgi-bin/paste.cgi:	tty || export 'HACK=x-terminal-emulator -e' ; $HACK less -f <(curl '%U') #this too?

### nq, if the query string is missing, match.
#s http d thebackupbox.net p /cgi-bin/paste.cgi nq:	xmessage "no paste ID. TODO: submit something to paste site."
#s https d thebackupbox.net p /cgi-bin/paste.cgi nq:	xmessage "no paste ID. TODO: submit something to paste site."

### default for http and https
s http:			x-www-browser --new-tab '%U'
s https:		x-www-browser --new-tab '%U'

### everything else
s urn:			urnstart '%U'
s selftitle:		cat <(ppid) <($PPID) <(ppid $$) <(ppid $PPID) <(xps) | xmessage -file -
s ppid:			xmessage $PPID
s finger:		x-terminal-emulator -e less -f <(printf '%%s\r\n' '%p' | cut -d/ -f2- | ncat '%d' 79 | tr -d '\r')
s telnet:		x-terminal-emulator -e telnet %d %P
s ssh:			tty || export 'HACK=x-terminal-emulator -e' ; if [ "%p" ];then p="$(uriunescape '%p')";fi;if [ "%P" ]; then HACK_PORT="-p %P";fi;if [ "%u" ];then HACK_USER="%u@";fi; ${HACK} ssh -t ${HACK_PORT} ${HACK_USER}%d ${p:1}
s whois:		x-terminal-emulator -e less -f <(whois "$(printf '%%s\n' '%d' | sed 's/^..*$/-h/')" '%d' "$(printf '%%s\n' '%p' | sed 's|^/*||g')")
s mailto:		tty || export 'HACK=x-terminal-emulator -e' ; $HACK mutt %p
s sftp:			tty || export 'HACK=x-terminal-emulator -e' ; echo $HACK sftp %u@%d -p %P
s ftp:			dillo '%U'
s irc:			CH="$(printf '%%s%%s\n' '%p%f' | cut -b2- | unescape | sed 's/^#//')";x-terminal-emulator -e irssi --config <(printf '%%s\n' 'servers=({address="%d";port="%P";chatnet="default";use_ssl="no";autoconnect="yes";});chatnets={default={type="IRC";autosendcmd="/join #'"$CH"' %q";}}')
s ircs:			CH="$(printf '%%s%%s\n' '%p%f' | cut -b2- | unescape | sed 's/^#//')";x-terminal-emulator -e irssi --config <(printf '%%s\n' 'servers=({address="%d";port="%P";chatnet="default";use_ssl="yes";autoconnect="yes";});chatnets={default={type="IRC";autosendcmd="/join #'"$CH"' %q";}}')
#s magnet:		magnet_handler '%U'
s magnet:		qbittorrent '%U'
#s gopher:		castor '%U'
s gopher:		gopher '%d' '%P' '%p'
#s gopher:		uristart 'http://gopher.hacking.allowed.org/cgi-bin/proxy.cgi?url=%U'
#s gopher		lynx '%U'
#s gopher		iceweasel --new-tab '%U'
s hackvr:		if [ "%u" ];then USER="%u";fi;ncat '%d' '%P' -c "echo $USER action %p;hackvr_uri"
s spice:		remote-viewer '%U'
s man:			CMD='printf "%%s\n" '\''%p'\'' | tr '\''()'\'' '\''  '\'' | awk '\''{print $2, $1}'\'' | xargs man' ; tty && eval "$CMD" ; tty || x-terminal-emulator -e sh -c "$CMD"
#s minetest:		/usr/games/minetest --go --name '%u' --password '%k' --address '%d' --port '%P'
s minetest:		minetest_handler '%U' '%u' '%d' '%P' '%q'
s dntp:			x-terminal-emulator -e less -f <(printf '%%s\n' '%p' | uriunescape | ncat '%d' '%P')
s talk:			x-terminal-emulator -e ytalk %p
s start:		xmessage '%U'
s meta:			grep '^%q\t' ~/.config/start.conf | xmessage -file -
s env:			env | xmessage -file -
s whob:			x-terminal-emulator -e less -f <(whois -h whois.pwhois.org '%d')
s ip:			x-terminal-emulator -e less -f <(printf "whob://%%s/\ndrop://%%s/\nssh://%%s/\n" '%p' '%p' '%p')
s drop:			rsh -l epoch 21.41.41.1 "echo '%d' >> /etc/bant/dicks"
s nntp:			export GROUP="$(printf '%%s\n' '%p' | cut -d/ -f2-)" ; $(printf "$(oxtin)" "tin -g %d $GROUP")
s vnc:			vncviewer -shared %d:%P
s tls:			ncat --ssl %d %P
s ssl:			ncat --ssl %d %P
s rtmp:			mpv '%U'
## this is if cuturl can't find a scheme for the "url". get the mimetype and check for a pipeline to run
#s DEFAULT:		xmessage '%U'
s file:			if [ '%p' ];then eval "$(printf '%%s\n' '%U' | uriprintf "$(grep "^$(if [ "%q" ];then echo '%q' | tr '&' '\n' | grep ^mime-type= | cut -d= -f2-; else file --mime-type '%p' | cut '-d ' -f2;fi):" ~/.config/mimetype.conf | cut -d$':' -f2- | sed 's/^'$'\t''*//g')")";else xmessage file %p does not exist;fi
#s FUCK:		xmessage testing
#s file:		start '%p'
s steam:		uristart https://steamdb.info/app/$(printf "%%s\n" "%p" | cut -d/ -f2)
s acct:			user_at_host.sh '%p'
s view-source:		x-www-browser '%U'
s xpilot:		xpilot -join '%d' -name $USER -user $USER -port '%P'
s geo:			tty || export 'HACK=x-terminal-emulator -e' ; $HACK geo_handler '%p'
s search:		printf "%%s\n" "%q" | tr '&' '\n' | grep '^q=' | cut '-d=' -f2- | tr '\n' '\0' | xargs -0 printf 'https://ddg.gg/?q=%%s\n' | tr '\n' '\0' | xargs -0 uristart
s dict:			xmessage "$@"
s about p certificate:	query_param cert | tr '\n' '\0' | xargs -0 uriunescape | xargs printf "%s\n\n" | fold -w 64
s mosh:			if [ '%P' ];then 'P=--ssh="ssh -p %P"';fi;if [ '%u' ];then u='%u@';fi ; $(printf "$(oxtin)" "mosh $P $u"'%d')
s tox:			qtox '%U'
s gemini:		kristall '%U'
#s gemini:		gemini-handler '%U'
s data:			data_handler '%p'
ns:			uristart 'file:///%d'
s gemini-proxy:		
s qemu+ssh:		virt-manager -c '%U'
